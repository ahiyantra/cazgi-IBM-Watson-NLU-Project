{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","React","Component","render","_jsx","children","className","Object","entries","this","props","emotions","map","mapentry","_jsxs","App","constructor","arguments","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderOutput","input_mode","setState","sendForSentimentAnalysis","url","document","getElementById","value","fetch","then","response","json","data","label","output","color","style","fontSize","catch","error","console","log","sendForEmotionAnalysis","onClick","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.97fc74d1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './bootstrap.min.css';\r\n\r\nclass EmotionTable extends React.Component {\r\n    render() {\r\n      //Returns the emotions as an HTML table\r\n      return (  \r\n        <div>\r\n          <table className=\"table table-bordered\">\r\n            <tbody>\r\n            {\r\n              /*Write code to use the .map method that you worked on in the \r\n              Hands-on React lab to extract the emotions. If you are stuck,\r\n              please click the instructions to see how to implement a map*/\r\n              \r\n              Object.entries(this.props.emotions).map(function(mapentry) {\r\n                return (\r\n                  <tr>\r\n                    <td>{mapentry[0]}</td>\r\n                    <td>{mapentry[1]}</td>\r\n                  </tr>\r\n                )\r\n              })\r\n            }\r\n            </tbody>\r\n          </table>\r\n          </div>\r\n          );\r\n        }\r\n    \r\n}\r\nexport default EmotionTable;","import './bootstrap.min.css';\r\nimport './App.css';\r\nimport EmotionTable from './EmotionTable.js';\r\nimport React from 'react';\r\n\r\nclass App extends React.Component {\r\n  /*\r\n  We are setting the component as a state named innercomp.\r\n  When this state is accessed, the HTML that is set as the \r\n  value of the state, will be returned. The initial input mode\r\n  is set to text\r\n  */\r\n  state = {innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\r\n            mode: \"text\",\r\n          sentimentOutput:[],\r\n          sentiment:true\r\n        }\r\n  \r\n  /*\r\n  This method returns the component based on what the input mode is.\r\n  If the requested input mode is \"text\" it returns a textbox with 4 rows.\r\n  If the requested input mode is \"url\" it returns a textbox with 1 row.\r\n  */\r\n \r\n  renderOutput = (input_mode)=>{\r\n    let rows = 1\r\n    let mode = \"url\"\r\n    //If the input mode is text make it 4 lines\r\n    if(input_mode === \"text\"){\r\n      mode = \"text\"\r\n      rows = 4\r\n    }\r\n      this.setState({innercomp:<textarea rows={rows} cols=\"50\" id=\"textinput\"/>,\r\n      mode: mode,\r\n      sentimentOutput:[],\r\n      sentiment:true\r\n      });\r\n  } \r\n  \r\n  sendForSentimentAnalysis = () => {\r\n    this.setState({sentiment:true});\r\n    let url = \".\";\r\n    let mode = this.state.mode\r\n    url = url+\"/\" + mode + \"/sentiment?\"+ mode + \"=\"+document.getElementById(\"textinput\").value;\r\n\r\n    fetch(url).then((response)=>{\r\n        response.json().then((data)=>{\r\n        this.setState({sentimentOutput:data.label});\r\n        let output = data.label;\r\n        let color = \"blue\"\r\n        switch(output) {\r\n          case \"positive\": color = \"green\";break;\r\n          case \"negative\": color = \"red\";break;\r\n          default: color = \"yellow\";\r\n        }\r\n        output = <div style={{color:color,fontSize:20}}>{output}</div>\r\n        this.setState({sentimentOutput:output});\r\n      })})\r\n    .catch(error => console.log(error));\r\n  }\r\n\r\n  sendForEmotionAnalysis = () => {\r\n\r\n    this.setState({sentiment:false});\r\n    let url = \".\";\r\n    let mode = this.state.mode;\r\n    url = url + \"/\" + mode + \"/emotion?\" + mode + \"=\" + document.getElementById(\"textinput\").value;                                                                                                         \r\n    \r\n    fetch(url).then((response)=>{\r\n        response.json().then((data)=>{\r\n        this.setState({sentimentOutput:<EmotionTable emotions={data}/>});\r\n      })})\r\n    .catch(error => console.log(error));\r\n  }\r\n  \r\n\r\n  render() {\r\n    return (  \r\n      <div className=\"App\">\r\n      <button className=\"btn btn-info\" onClick={()=>{this.renderOutput('text')}}>Text</button>\r\n        <button className=\"btn btn-dark\"  onClick={()=>{this.renderOutput('url')}}>URL</button>\r\n        <br/><br/>\r\n        {this.state.innercomp}\r\n        <br/>\r\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\r\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\r\n        <br/>\r\n            {this.state.sentimentOutput}\r\n      </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}